class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        row=len(matrix)
        col=len(matrix[0])
        dp={}
        def dfs(r,c,Prev):

            if (r<0 or r==row or
                c<0 or c==col or
                matrix[r][c]<=Prev
            ):
                return 0
            if (r,c) in dp:
                return dp[(r,c)]
            
            res=1
            res=max(res,1+dfs(r+1,c,matrix[r][c]))
            res=max(res,1+dfs(r-1,c,matrix[r][c]))
            res=max(res,1+dfs(r,c+1,matrix[r][c]))
            res=max(res,1+dfs(r,c-1,matrix[r][c]))
            dp[(r,c)]=res
            return res
        
        for i in range(row):
            for j in range(col):
                dfs(i,j,-1)
        
        return max(dp.values())
